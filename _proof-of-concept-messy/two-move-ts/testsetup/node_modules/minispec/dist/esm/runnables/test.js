var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Engine from '../engine/engine.js';
export default class Test {
    constructor(name, code, options) {
        this.name = name;
        this.code = code;
        this.engine = (options === null || options === void 0 ? void 0 : options.engine) || Engine.getInstance();
        this.skipped = (options === null || options === void 0 ? void 0 : options.skipped) || false;
        this.location = options === null || options === void 0 ? void 0 : options.location;
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            this.engine.reportTestStarted(this);
            try {
                if (this.skipped) {
                    throw new Error('skipped');
                }
                yield this.code();
                this.engine.reportTestFinished();
            }
            catch (error) {
                this.engine.reportTestFailed(error);
            }
        });
    }
    skip() {
        this.skipped = true;
    }
}
