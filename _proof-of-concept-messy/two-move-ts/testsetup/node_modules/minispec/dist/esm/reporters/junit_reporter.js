import BaseReporter from './base_console_reporter.js';
import Benchmarker from '../services/benchmarker.js';
export default class JunitReporter extends BaseReporter {
    constructor(stream = process.stdout, benchmarker = new Benchmarker()) {
        super();
        this.stream = stream;
        this.benchmarker = benchmarker;
        this.xmlHeaderHasBeenPrinted = false;
        this.lastReportedContext = undefined;
    }
    startContext(context) {
        if (this.xmlHeaderHasBeenPrinted === false) {
            this.stream.write(`<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n`);
            this.reportTestsuites();
            this.xmlHeaderHasBeenPrinted = true;
        }
        if (this.activeContext && this.activeContext === this.lastReportedContext) {
            this.reportTestsuiteFinished();
            this.lastReportedContext = undefined;
        }
        super.startContext(context);
    }
    stopContext() {
        if (this.activeContext && this.activeContext === this.lastReportedContext) {
            this.reportTestsuiteFinished();
            this.lastReportedContext = undefined;
        }
        super.stopContext();
    }
    startTest(test) {
        this.benchmarker.start();
        if (this.activeContext !== this.lastReportedContext) {
            this.reportTestsuite();
            this.lastReportedContext = this.activeContext;
        }
        super.startTest(test);
    }
    stopTest(error) {
        this.reportTestcase(this.benchmarker.getRawDuration() / 1000);
        if (error) {
            this.reportFailure(error);
        }
        this.reportTestcaseFinished();
        super.stopTest();
    }
    summarizeExecution() {
        if (this.xmlHeaderHasBeenPrinted) {
            this.reportTestsuitesFinished();
        }
        super.summarizeExecution();
    }
    reportTestsuites() {
        this.addToReport(0, 'testsuites');
    }
    reportTestsuite() {
        var _a;
        const fullContextName = this.activeContexts.map((c) => c.name).join(', ');
        this.addToReport(2, 'testsuite', new Map(Object.entries({
            "name": fullContextName,
            "tests": (_a = this.activeContext) === null || _a === void 0 ? void 0 : _a.numberOfTests,
            "timestamp": Date.now()
        })));
    }
    reportTestcase(durationInSeconds) {
        var _a;
        const fullContextName = this.activeContexts.map((c) => c.name).join(', ');
        const roundedDurationInSeconds = Math.round((durationInSeconds + Number.EPSILON) * 100000) / 100000;
        this.addToReport(4, 'testcase', new Map(Object.entries({
            "name": (_a = this.activeTest) === null || _a === void 0 ? void 0 : _a.name,
            "classname": fullContextName,
            "time": roundedDurationInSeconds
        })));
    }
    reportFailure(error) {
        this.addToReport(6, 'failure', new Map(Object.entries({
            "message": error.message,
            "type": error.name
        })));
        this.addToReport(6, '/failure');
    }
    reportTestcaseFinished() {
        this.addToReport(4, '/testcase');
    }
    reportTestsuiteFinished() {
        this.addToReport(2, '/testsuite');
    }
    reportTestsuitesFinished() {
        this.addToReport(0, '/testsuites');
    }
    addToReport(indent, nodeName, attributes = new Map()) {
        let serializedAttributes = '';
        attributes.forEach((attributeValue, attributeName) => {
            attributeValue = attributeValue === null || attributeValue === void 0 ? void 0 : attributeValue.toString().replace(/"/g, "&quot;").replace(/</g, "&lt;");
            serializedAttributes += ` ${attributeName}=${JSON.stringify(attributeValue === null || attributeValue === void 0 ? void 0 : attributeValue.toString())}`;
        });
        this.stream.write(Array(indent + 1).join(' '));
        this.stream.write(`<${nodeName}${serializedAttributes}>`);
        this.stream.write('\n');
    }
}
