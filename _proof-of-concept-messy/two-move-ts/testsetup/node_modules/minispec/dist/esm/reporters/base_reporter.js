export default class BaseReporter {
    constructor() {
        this.activeContexts = [];
        this.activeTest = null;
        this.timerStartedAt = 0;
        this.timerStopedAt = 0;
        this.timerIntervals = [];
    }
    startContext(context) {
        if (this.activeTest) {
            throw new Error('Test in progress, stop it before starting a new context');
        }
        this.activeContexts.push(context);
    }
    stopContext() {
        if (this.activeTest) {
            throw new Error('Test in progress, stop it before stopping active context');
        }
        if (this.activeContexts.length) {
            this.activeContexts.pop();
            return;
        }
        throw new Error('No active context to stop');
    }
    startTest(test) {
        if (this.activeTest) {
            throw new Error('Test in progress, stop it before starting a new one');
        }
        this.activeTest = test;
    }
    stopTest() {
        if (!this.activeTest) {
            throw new Error('No active test to stop');
        }
        this.activeTest = null;
    }
    summarizeExecution() {
        if (this.activeTest) {
            throw new Error('Test in progress, stop it before asking for execution summary');
        }
        if (this.activeContexts.length) {
            throw new Error('Context in progress, stop it before asking for execution summary');
        }
    }
    startTimer(timeInMilliseconds) {
        this.timerStartedAt = BaseReporter.getActualTime(timeInMilliseconds);
    }
    addTimerInterval(timeInMilliseconds, intervalName) {
        const interval = new Map();
        interval.set(intervalName || `interval #${this.timerIntervals.length}`, BaseReporter.getActualTime(timeInMilliseconds));
        this.timerIntervals.push(interval);
    }
    stopTimer(timeInMilliseconds) {
        this.timerStopedAt = BaseReporter.getActualTime(timeInMilliseconds);
    }
    static getActualTime(timeInMilliseconds) {
        if (timeInMilliseconds === undefined) {
            return Date.now();
        }
        return timeInMilliseconds;
    }
    get activeContext() {
        if (this.activeContexts.length) {
            return this.activeContexts[this.activeContexts.length - 1];
        }
        return undefined;
    }
}
