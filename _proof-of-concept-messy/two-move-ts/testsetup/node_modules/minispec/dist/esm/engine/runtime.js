var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Context from '../runnables/context.js';
import Test from '../runnables/test.js';
import Hook from '../runnables/hook.js';
export default class Runtime {
    constructor(engine, activeContext) {
        this.engine = engine;
        this.activeContext = activeContext;
        this.contexts = [];
        this.hasSomeFocus = false;
    }
    discover() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const context of this.contexts) {
                yield context.discover();
            }
        });
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const context of this.contexts) {
                yield context.execute(this.hasSomeFocus);
            }
        });
    }
    addContext(name, code, options) {
        const context = new Context(name, code, {
            focused: (options === null || options === void 0 ? void 0 : options.focused) || false,
            skipped: (options === null || options === void 0 ? void 0 : options.skipped) || false,
            engine: this.engine,
        });
        this.hasSomeFocus = this.hasSomeFocus || (options === null || options === void 0 ? void 0 : options.focused) || false;
        if (this.activeContext.hasOne()) {
            this.activeContext.get().addChildContext(context);
            return;
        }
        this.contexts.push(context);
    }
    addTest(name, code, options) {
        const test = new Test(name, code, {
            engine: this.engine,
            skipped: (options === null || options === void 0 ? void 0 : options.skipped) || false,
            location: (options === null || options === void 0 ? void 0 : options.location) || undefined
        });
        this.activeContext.get().addTest(test, (options === null || options === void 0 ? void 0 : options.focused) || false);
        this.hasSomeFocus = this.hasSomeFocus || (options === null || options === void 0 ? void 0 : options.focused) || false;
    }
    addBeforeAllHook(code) {
        const hook = new Hook(code);
        this.activeContext.get().addBeforeAllHook(hook);
    }
    addAfterAllHook(code) {
        const hook = new Hook(code);
        this.activeContext.get().addAfterAllHook(hook);
    }
    addBeforeEachHook(code) {
        const hook = new Hook(code);
        this.activeContext.get().addBeforeEachHook(hook);
    }
    addAfterEachHook(code) {
        const hook = new Hook(code);
        this.activeContext.get().addAfterEachHook(hook);
    }
}
