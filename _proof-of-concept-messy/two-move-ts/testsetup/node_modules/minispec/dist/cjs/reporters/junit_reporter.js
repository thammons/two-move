"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var base_console_reporter_js_1 = require("./base_console_reporter.js");
var benchmarker_js_1 = require("../services/benchmarker.js");
var JunitReporter = /** @class */ (function (_super) {
    __extends(JunitReporter, _super);
    function JunitReporter(stream, benchmarker) {
        if (stream === void 0) { stream = process.stdout; }
        if (benchmarker === void 0) { benchmarker = new benchmarker_js_1.default(); }
        var _this = _super.call(this) || this;
        _this.stream = stream;
        _this.benchmarker = benchmarker;
        _this.xmlHeaderHasBeenPrinted = false;
        _this.lastReportedContext = undefined;
        return _this;
    }
    JunitReporter.prototype.startContext = function (context) {
        if (this.xmlHeaderHasBeenPrinted === false) {
            this.stream.write("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n");
            this.reportTestsuites();
            this.xmlHeaderHasBeenPrinted = true;
        }
        if (this.activeContext && this.activeContext === this.lastReportedContext) {
            this.reportTestsuiteFinished();
            this.lastReportedContext = undefined;
        }
        _super.prototype.startContext.call(this, context);
    };
    JunitReporter.prototype.stopContext = function () {
        if (this.activeContext && this.activeContext === this.lastReportedContext) {
            this.reportTestsuiteFinished();
            this.lastReportedContext = undefined;
        }
        _super.prototype.stopContext.call(this);
    };
    JunitReporter.prototype.startTest = function (test) {
        this.benchmarker.start();
        if (this.activeContext !== this.lastReportedContext) {
            this.reportTestsuite();
            this.lastReportedContext = this.activeContext;
        }
        _super.prototype.startTest.call(this, test);
    };
    JunitReporter.prototype.stopTest = function (error) {
        this.reportTestcase(this.benchmarker.getRawDuration() / 1000);
        if (error) {
            this.reportFailure(error);
        }
        this.reportTestcaseFinished();
        _super.prototype.stopTest.call(this);
    };
    JunitReporter.prototype.summarizeExecution = function () {
        if (this.xmlHeaderHasBeenPrinted) {
            this.reportTestsuitesFinished();
        }
        _super.prototype.summarizeExecution.call(this);
    };
    JunitReporter.prototype.reportTestsuites = function () {
        this.addToReport(0, 'testsuites');
    };
    JunitReporter.prototype.reportTestsuite = function () {
        var _a;
        var fullContextName = this.activeContexts.map(function (c) { return c.name; }).join(', ');
        this.addToReport(2, 'testsuite', new Map(Object.entries({
            "name": fullContextName,
            "tests": (_a = this.activeContext) === null || _a === void 0 ? void 0 : _a.numberOfTests,
            "timestamp": Date.now()
        })));
    };
    JunitReporter.prototype.reportTestcase = function (durationInSeconds) {
        var _a;
        var fullContextName = this.activeContexts.map(function (c) { return c.name; }).join(', ');
        var roundedDurationInSeconds = Math.round((durationInSeconds + Number.EPSILON) * 100000) / 100000;
        this.addToReport(4, 'testcase', new Map(Object.entries({
            "name": (_a = this.activeTest) === null || _a === void 0 ? void 0 : _a.name,
            "classname": fullContextName,
            "time": roundedDurationInSeconds
        })));
    };
    JunitReporter.prototype.reportFailure = function (error) {
        this.addToReport(6, 'failure', new Map(Object.entries({
            "message": error.message,
            "type": error.name
        })));
        this.addToReport(6, '/failure');
    };
    JunitReporter.prototype.reportTestcaseFinished = function () {
        this.addToReport(4, '/testcase');
    };
    JunitReporter.prototype.reportTestsuiteFinished = function () {
        this.addToReport(2, '/testsuite');
    };
    JunitReporter.prototype.reportTestsuitesFinished = function () {
        this.addToReport(0, '/testsuites');
    };
    JunitReporter.prototype.addToReport = function (indent, nodeName, attributes) {
        if (attributes === void 0) { attributes = new Map(); }
        var serializedAttributes = '';
        attributes.forEach(function (attributeValue, attributeName) {
            attributeValue = attributeValue === null || attributeValue === void 0 ? void 0 : attributeValue.toString().replace(/"/g, "&quot;").replace(/</g, "&lt;");
            serializedAttributes += " ".concat(attributeName, "=").concat(JSON.stringify(attributeValue === null || attributeValue === void 0 ? void 0 : attributeValue.toString()));
        });
        this.stream.write(Array(indent + 1).join(' '));
        this.stream.write("<".concat(nodeName).concat(serializedAttributes, ">"));
        this.stream.write('\n');
    };
    return JunitReporter;
}(base_console_reporter_js_1.default));
exports.default = JunitReporter;
