import Runtime from './runtime.js';
import { IReporter } from '../reporters/index.js';
import Context from '../runnables/context.js';
import Test from '../runnables/test.js';
import ActiveContext from './active_context.js';
export interface IEngine {
    activeContext: ActiveContext;
    discover(): Promise<IEngine>;
    execute(): Promise<void>;
    addReporter(reporter: IReporter): IEngine;
    addReporters(reporters: IReporter | IReporter[]): IEngine;
    setReporter(reporter: IReporter): IEngine;
    setReporters(reporters: IReporter | IReporter[]): IEngine;
    reportContextStarted(context: Context): void;
    reportContextFinished(): void;
    reportTestStarted(test: Test): void;
    reportTestFinished(): void;
    reportTestFailed(error: Error): void;
}
export default class Engine implements IEngine {
    private static instance;
    readonly runtime: Runtime;
    readonly activeContext: ActiveContext;
    private reporters;
    private exitcode;
    private discovered;
    private constructor();
    static getInstance(): Engine;
    static discover(): Promise<IEngine>;
    static execute(): Promise<void>;
    discover(): Promise<IEngine>;
    execute(): Promise<void>;
    addReporter(reporter: IReporter): IEngine;
    addReporters(reporters: IReporter | IReporter[]): IEngine;
    setReporter(reporter: IReporter): IEngine;
    setReporters(reporters: IReporter | IReporter[]): IEngine;
    reportContextStarted(context: Context): void;
    reportContextFinished(): void;
    reportTestStarted(test: Test): void;
    reportTestFinished(): void;
    reportTestFailed(error: Error): void;
}
