"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var runtime_js_1 = require("./runtime.js");
var index_js_1 = require("../reporters/index.js");
var active_context_js_1 = require("./active_context.js");
var Engine = /** @class */ (function () {
    function Engine(reporters) {
        this.reporters = [];
        this.exitcode = 0;
        this.discovered = false;
        this.activeContext = new active_context_js_1.default(this);
        this.runtime = new runtime_js_1.default(this, this.activeContext);
        this.addReporters(reporters || new index_js_1.ConsoleReporter);
    }
    Engine.getInstance = function () {
        if (this.instance) {
            return this.instance;
        }
        return this.instance = new Engine();
    };
    Engine.discover = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getInstance().discover()];
            });
        });
    };
    Engine.execute = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInstance().execute()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Engine.prototype.discover = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.runtime.discover()];
                    case 1:
                        _a.sent();
                        this.discovered = true;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    Engine.prototype.execute = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, reporter, _b, _c, reporter, _d, _e, reporter, _f, _g, reporter;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        for (_i = 0, _a = this.reporters; _i < _a.length; _i++) {
                            reporter = _a[_i];
                            reporter.startTimer(Date.now());
                        }
                        if (!!this.discovered) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.discover()];
                    case 1:
                        _h.sent();
                        _h.label = 2;
                    case 2:
                        for (_b = 0, _c = this.reporters; _b < _c.length; _b++) {
                            reporter = _c[_b];
                            reporter.addTimerInterval(Date.now(), 'discovering');
                        }
                        return [4 /*yield*/, this.runtime.execute()];
                    case 3:
                        _h.sent();
                        for (_d = 0, _e = this.reporters; _d < _e.length; _d++) {
                            reporter = _e[_d];
                            reporter.addTimerInterval(Date.now(), 'execution');
                            reporter.stopTimer(Date.now());
                        }
                        for (_f = 0, _g = this.reporters; _f < _g.length; _f++) {
                            reporter = _g[_f];
                            reporter.summarizeExecution();
                        }
                        process.exitCode = this.exitcode;
                        return [2 /*return*/];
                }
            });
        });
    };
    Engine.prototype.addReporter = function (reporter) {
        this.addReporters(reporter);
        return this;
    };
    Engine.prototype.addReporters = function (reporters) {
        var _a;
        if (Array.isArray(reporters)) {
            (_a = this.reporters).push.apply(_a, reporters);
        }
        else {
            this.reporters.push(reporters);
        }
        return this;
    };
    Engine.prototype.setReporter = function (reporter) {
        this.setReporters(reporter);
        return this;
    };
    Engine.prototype.setReporters = function (reporters) {
        var _a;
        this.reporters = [];
        if (Array.isArray(reporters)) {
            (_a = this.reporters).push.apply(_a, reporters);
        }
        else {
            this.reporters.push(reporters);
        }
        return this;
    };
    Engine.prototype.reportContextStarted = function (context) {
        for (var _i = 0, _a = this.reporters; _i < _a.length; _i++) {
            var reporter = _a[_i];
            reporter.startContext(context);
        }
    };
    Engine.prototype.reportContextFinished = function () {
        for (var _i = 0, _a = this.reporters; _i < _a.length; _i++) {
            var reporter = _a[_i];
            reporter.stopContext();
        }
    };
    Engine.prototype.reportTestStarted = function (test) {
        for (var _i = 0, _a = this.reporters; _i < _a.length; _i++) {
            var reporter = _a[_i];
            reporter.startTest(test);
        }
    };
    Engine.prototype.reportTestFinished = function () {
        for (var _i = 0, _a = this.reporters; _i < _a.length; _i++) {
            var reporter = _a[_i];
            reporter.stopTest();
        }
    };
    Engine.prototype.reportTestFailed = function (error) {
        if (error.message !== 'skipped') {
            this.exitcode = 1;
        }
        for (var _i = 0, _a = this.reporters; _i < _a.length; _i++) {
            var reporter = _a[_i];
            reporter.stopTest(error);
        }
    };
    return Engine;
}());
exports.default = Engine;
