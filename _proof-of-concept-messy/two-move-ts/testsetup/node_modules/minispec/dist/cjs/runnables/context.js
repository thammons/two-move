"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var engine_js_1 = require("../engine/engine.js");
var Context = /** @class */ (function () {
    function Context(name, code, options) {
        this.name = name;
        this.code = code;
        this.beforeAllHooks = [];
        this.afterAllHooks = [];
        this.beforeEachHooks = [];
        this.afterEachHooks = [];
        this.tests = [];
        this.focusedTests = [];
        this.discovered = false;
        this.forced = false;
        this.skipped = false;
        this.contexts = [];
        this.engine = (options === null || options === void 0 ? void 0 : options.engine) || engine_js_1.default.getInstance();
        this.activeContext = this.engine.activeContext;
        this.focused = (options === null || options === void 0 ? void 0 : options.focused) || false;
        this.forced = (options === null || options === void 0 ? void 0 : options.forced) || false;
        this.skipped = (options === null || options === void 0 ? void 0 : options.skipped) || false;
    }
    Context.prototype.discover = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, context;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.discovered) {
                            return [2 /*return*/];
                        }
                        this.activeContext.set(this);
                        return [4 /*yield*/, this.code()];
                    case 1:
                        _b.sent();
                        _i = 0, _a = this.contexts;
                        _b.label = 2;
                    case 2:
                        if (!(_i < _a.length)) return [3 /*break*/, 5];
                        context = _a[_i];
                        return [4 /*yield*/, context.discover()];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5:
                        this.discovered = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    Context.prototype.execute = function (focusedOnly, beforeEachHooks, afterEachHooks) {
        if (beforeEachHooks === void 0) { beforeEachHooks = []; }
        if (afterEachHooks === void 0) { afterEachHooks = []; }
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, hook, tests, _b, tests_1, test, _c, beforeEachHooks_1, hook, _d, _e, hook, _f, _g, hook, _h, afterEachHooks_1, hook, contexts, _j, contexts_1, context, _k, _l, hook;
            return __generator(this, function (_m) {
                switch (_m.label) {
                    case 0:
                        this.activeContext.set(this);
                        this.engine.reportContextStarted(this);
                        _i = 0, _a = this.beforeAllHooks;
                        _m.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        hook = _a[_i];
                        return [4 /*yield*/, hook.execute()];
                    case 2:
                        _m.sent();
                        _m.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        tests = this.findTestsToExecute(focusedOnly);
                        _b = 0, tests_1 = tests;
                        _m.label = 5;
                    case 5:
                        if (!(_b < tests_1.length)) return [3 /*break*/, 23];
                        test = tests_1[_b];
                        _c = 0, beforeEachHooks_1 = beforeEachHooks;
                        _m.label = 6;
                    case 6:
                        if (!(_c < beforeEachHooks_1.length)) return [3 /*break*/, 9];
                        hook = beforeEachHooks_1[_c];
                        return [4 /*yield*/, hook.execute()];
                    case 7:
                        _m.sent();
                        _m.label = 8;
                    case 8:
                        _c++;
                        return [3 /*break*/, 6];
                    case 9:
                        _d = 0, _e = this.beforeEachHooks;
                        _m.label = 10;
                    case 10:
                        if (!(_d < _e.length)) return [3 /*break*/, 13];
                        hook = _e[_d];
                        return [4 /*yield*/, hook.execute()];
                    case 11:
                        _m.sent();
                        _m.label = 12;
                    case 12:
                        _d++;
                        return [3 /*break*/, 10];
                    case 13: return [4 /*yield*/, test.execute()];
                    case 14:
                        _m.sent();
                        _f = 0, _g = this.afterEachHooks;
                        _m.label = 15;
                    case 15:
                        if (!(_f < _g.length)) return [3 /*break*/, 18];
                        hook = _g[_f];
                        return [4 /*yield*/, hook.execute()];
                    case 16:
                        _m.sent();
                        _m.label = 17;
                    case 17:
                        _f++;
                        return [3 /*break*/, 15];
                    case 18:
                        _h = 0, afterEachHooks_1 = afterEachHooks;
                        _m.label = 19;
                    case 19:
                        if (!(_h < afterEachHooks_1.length)) return [3 /*break*/, 22];
                        hook = afterEachHooks_1[_h];
                        return [4 /*yield*/, hook.execute()];
                    case 20:
                        _m.sent();
                        _m.label = 21;
                    case 21:
                        _h++;
                        return [3 /*break*/, 19];
                    case 22:
                        _b++;
                        return [3 /*break*/, 5];
                    case 23:
                        contexts = this.findContextsToExecute(focusedOnly);
                        _j = 0, contexts_1 = contexts;
                        _m.label = 24;
                    case 24:
                        if (!(_j < contexts_1.length)) return [3 /*break*/, 27];
                        context = contexts_1[_j];
                        return [4 /*yield*/, context.execute(focusedOnly, __spreadArray(__spreadArray([], beforeEachHooks, true), this.beforeEachHooks, true), __spreadArray(__spreadArray([], afterEachHooks, true), this.afterEachHooks, true))];
                    case 25:
                        _m.sent();
                        _m.label = 26;
                    case 26:
                        _j++;
                        return [3 /*break*/, 24];
                    case 27:
                        _k = 0, _l = this.afterAllHooks;
                        _m.label = 28;
                    case 28:
                        if (!(_k < _l.length)) return [3 /*break*/, 31];
                        hook = _l[_k];
                        return [4 /*yield*/, hook.execute()];
                    case 29:
                        _m.sent();
                        _m.label = 30;
                    case 30:
                        _k++;
                        return [3 /*break*/, 28];
                    case 31:
                        this.engine.reportContextFinished();
                        return [2 /*return*/];
                }
            });
        });
    };
    Context.prototype.addTest = function (test, focused) {
        if (focused === void 0) { focused = false; }
        if (this.skipped) {
            test.skip();
        }
        this.tests.push(test);
        if (focused) {
            this.focusedTests.push(test);
        }
    };
    Context.prototype.addBeforeAllHook = function (hook) {
        this.beforeAllHooks.push(hook);
    };
    Context.prototype.addBeforeEachHook = function (hook) {
        this.beforeEachHooks.push(hook);
    };
    Context.prototype.addAfterEachHook = function (hook) {
        this.afterEachHooks.push(hook);
    };
    Context.prototype.addAfterAllHook = function (hook) {
        this.afterAllHooks.push(hook);
    };
    Context.prototype.addChildContext = function (context) {
        if (this.skipped) {
            context.skip();
        }
        this.contexts.push(context);
    };
    Context.prototype.isSkipped = function () {
        return this.skipped;
    };
    Context.prototype.skip = function () {
        this.skipped = true;
    };
    Object.defineProperty(Context.prototype, "numberOfTests", {
        get: function () {
            return this.tests.length;
        },
        enumerable: false,
        configurable: true
    });
    Context.prototype.findTestsToExecute = function (focusedOnly) {
        if (focusedOnly) {
            if (this.focusedTests.length) {
                return this.focusedTests;
            }
            return this.focused || this.forced ? this.tests : [];
        }
        return this.tests;
    };
    Context.prototype.findContextsToExecute = function (focusedOnly) {
        if (focusedOnly) {
            var focusedContext = this.contexts.filter(function (context) { return context.focused; });
            if (focusedContext.length) {
                return focusedContext;
            }
            if (this.focused || this.forced) {
                return this.contexts.map(function (context) {
                    context.forced = true;
                    return context;
                });
            }
        }
        return this.contexts;
    };
    return Context;
}());
exports.default = Context;
