var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Runtime from './runtime.js';
import { ConsoleReporter } from '../reporters/index.js';
import ActiveContext from './active_context.js';
export default class Engine {
    constructor(reporters) {
        this.reporters = [];
        this.exitcode = 0;
        this.discovered = false;
        this.activeContext = new ActiveContext(this);
        this.runtime = new Runtime(this, this.activeContext);
        this.addReporters(reporters || new ConsoleReporter);
    }
    static getInstance() {
        if (this.instance) {
            return this.instance;
        }
        return this.instance = new Engine();
    }
    static discover() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getInstance().discover();
        });
    }
    static execute() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.getInstance().execute();
        });
    }
    discover() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.runtime.discover();
            this.discovered = true;
            return this;
        });
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const reporter of this.reporters) {
                reporter.startTimer(Date.now());
            }
            if (!this.discovered) {
                yield this.discover();
            }
            for (const reporter of this.reporters) {
                reporter.addTimerInterval(Date.now(), 'discovering');
            }
            yield this.runtime.execute();
            for (const reporter of this.reporters) {
                reporter.addTimerInterval(Date.now(), 'execution');
                reporter.stopTimer(Date.now());
            }
            for (const reporter of this.reporters) {
                reporter.summarizeExecution();
            }
            process.exitCode = this.exitcode;
        });
    }
    addReporter(reporter) {
        this.addReporters(reporter);
        return this;
    }
    addReporters(reporters) {
        if (Array.isArray(reporters)) {
            this.reporters.push(...reporters);
        }
        else {
            this.reporters.push(reporters);
        }
        return this;
    }
    setReporter(reporter) {
        this.setReporters(reporter);
        return this;
    }
    setReporters(reporters) {
        this.reporters = [];
        if (Array.isArray(reporters)) {
            this.reporters.push(...reporters);
        }
        else {
            this.reporters.push(reporters);
        }
        return this;
    }
    reportContextStarted(context) {
        for (const reporter of this.reporters) {
            reporter.startContext(context);
        }
    }
    reportContextFinished() {
        for (const reporter of this.reporters) {
            reporter.stopContext();
        }
    }
    reportTestStarted(test) {
        for (const reporter of this.reporters) {
            reporter.startTest(test);
        }
    }
    reportTestFinished() {
        for (const reporter of this.reporters) {
            reporter.stopTest();
        }
    }
    reportTestFailed(error) {
        if (error.message !== 'skipped') {
            this.exitcode = 1;
        }
        for (const reporter of this.reporters) {
            reporter.stopTest(error);
        }
    }
}
