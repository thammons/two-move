import BaseConsoleReporter from './base_console_reporter.js';
import SummaryReporter from './summary_reporter.js';
export default class ConsoleReporter extends BaseConsoleReporter {
    constructor(summaryReporter, outStream, errorStream) {
        super(outStream, errorStream);
        this.summaryReporter = summaryReporter || new SummaryReporter(this.outStream, this.errorStream);
    }
    startContext(context) {
        if (this.activeContexts.length === 0) {
            this.log('');
        }
        super.startContext(context);
        if (context.isSkipped()) {
            this.log(this.indent(this.yellow(`${context.name} (SKIPPED)`)));
        }
        else {
            this.log(this.indent(context.name));
        }
        this.summaryReporter.startContext(context);
    }
    stopContext() {
        super.stopContext();
        this.summaryReporter.stopContext();
    }
    startTest(test) {
        super.startTest(test);
        this.summaryReporter.startTest(test);
    }
    stopTest(error) {
        const activeTest = this.activeTest;
        super.stopTest();
        const indentedTestName = this.indent((activeTest === null || activeTest === void 0 ? void 0 : activeTest.name) || '', true);
        if (error) {
            if (error.message === 'skipped') {
                this.error(this.yellow(`${indentedTestName} (SKIPPED)`));
            }
            else {
                this.error(this.red(`${indentedTestName} (FAILED)`));
            }
        }
        else {
            this.log(this.green(indentedTestName));
        }
        this.summaryReporter.stopTest(error);
    }
    summarizeExecution() {
        this.summaryReporter.summarizeExecution();
    }
    startTimer(timeInMilliseconds) {
        this.summaryReporter.startTimer(timeInMilliseconds);
    }
    stopTimer(timeInMilliseconds) {
        this.summaryReporter.stopTimer(timeInMilliseconds);
    }
    addTimerInterval(timeInMilliseconds, intervalName) {
        this.summaryReporter.addTimerInterval(timeInMilliseconds, intervalName);
    }
    indent(message, isTest = false) {
        const level = this.activeContexts.length - 1;
        const extra = isTest ? 3 : 1;
        const indentation = Array(level * 2 + extra).join(' ');
        return `${indentation}${message}`;
    }
}
