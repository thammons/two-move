import Benchmarker from '../services/benchmarker.js';
import ConsoleReporter from './console_reporter.js';
export default class BenchmarkReporter extends ConsoleReporter {
    constructor(summaryReporter, outStream, errorStream, testBenchmarker = new Benchmarker(), contextBenchmarkerFactory = () => new Benchmarker()) {
        super(summaryReporter, outStream, errorStream);
        this.testBenchmarker = testBenchmarker;
        this.contextBenchmarkerFactory = contextBenchmarkerFactory;
        this.contextBenchmarkers = [];
    }
    startContext(context) {
        const benchmarker = this.contextBenchmarkerFactory();
        benchmarker.start();
        this.contextBenchmarkers.push(benchmarker);
        super.startContext(context);
    }
    stopContext() {
        if (this.activeContext) {
            const benchmarker = this.contextBenchmarkers.pop();
            this.log(this.indent(`${this.gray(`${this.activeContext.name}:`)} ⏱️  ${benchmarker === null || benchmarker === void 0 ? void 0 : benchmarker.getDuration()} milliseconds`));
        }
        super.stopContext();
    }
    startTest(test) {
        this.testBenchmarker.start();
        super.startTest(test);
    }
    stopTest(error) {
        super.stopTest(error);
        this.log(this.indent(`  ⏱️  ${this.testBenchmarker.getDuration()} milliseconds`, true));
    }
}
