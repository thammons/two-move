import Test from './test.js';
import Hook from './hook.js';
import { IEngine } from '../engine/engine.js';
interface IContextOptions {
    engine?: IEngine;
    forced?: boolean;
    focused?: boolean;
    skipped?: boolean;
}
export default class Context {
    readonly name: string;
    protected readonly code: () => Promise<void>;
    private beforeAllHooks;
    private afterAllHooks;
    private beforeEachHooks;
    private afterEachHooks;
    private tests;
    private focusedTests;
    private readonly engine;
    private readonly activeContext;
    private discovered;
    protected readonly focused: boolean;
    protected forced: boolean;
    protected skipped: boolean;
    contexts: Context[];
    constructor(name: string, code: () => Promise<void>, options?: IContextOptions);
    discover(): Promise<void>;
    execute(focusedOnly: boolean, beforeEachHooks?: Hook[], afterEachHooks?: Hook[]): Promise<void>;
    addTest(test: Test, focused?: boolean): void;
    addBeforeAllHook(hook: Hook): void;
    addBeforeEachHook(hook: Hook): void;
    addAfterEachHook(hook: Hook): void;
    addAfterAllHook(hook: Hook): void;
    addChildContext(context: Context): void;
    isSkipped(): boolean;
    skip(): void;
    get numberOfTests(): number;
    private findTestsToExecute;
    private findContextsToExecute;
}
export {};
