import { IEngine } from './engine.js';
import ActiveContext from './active_context.js';
interface IAddTestOptions {
    focused?: boolean;
    skipped?: boolean;
    location?: string;
}
interface IAddContextOptions {
    focused?: boolean;
    skipped?: boolean;
}
export default class Runtime {
    private readonly engine;
    private readonly activeContext;
    private contexts;
    private hasSomeFocus;
    constructor(engine: IEngine, activeContext: ActiveContext);
    discover(): Promise<void>;
    execute(): Promise<void>;
    addContext(name: string, code: () => Promise<void>, options?: IAddContextOptions): void;
    addTest(name: string, code: () => Promise<void>, options?: IAddTestOptions): void;
    addBeforeAllHook(code: () => Promise<void>): void;
    addAfterAllHook(code: () => Promise<void>): void;
    addBeforeEachHook(code: () => Promise<void>): void;
    addAfterEachHook(code: () => Promise<void>): void;
}
export {};
