"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var base_console_reporter_js_1 = require("./base_console_reporter.js");
var SummaryReporter = /** @class */ (function (_super) {
    __extends(SummaryReporter, _super);
    function SummaryReporter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.skipped = [];
        _this.errors = [];
        _this.numberOfExecutedTest = 0;
        return _this;
    }
    SummaryReporter.prototype.stopTest = function (error) {
        var activeTest = this.activeTest;
        _super.prototype.stopTest.call(this);
        this.numberOfExecutedTest++;
        if (error) {
            var fullContextName = this.activeContexts.map(function (c) { return c.name; }).join(', ');
            var fullTestName = "".concat(fullContextName, ", it ").concat(activeTest === null || activeTest === void 0 ? void 0 : activeTest.name);
            if (error.message === 'skipped') {
                this.skipped.push({ testName: fullTestName, testLocation: activeTest === null || activeTest === void 0 ? void 0 : activeTest.location });
            }
            else {
                this.errors.push({ testName: fullTestName, testLocation: activeTest === null || activeTest === void 0 ? void 0 : activeTest.location, error: error, stack: error.stack });
            }
        }
        this.activeTest = null;
    };
    SummaryReporter.prototype.summarizeExecution = function () {
        _super.prototype.summarizeExecution.call(this);
        this.log('');
        if (this.skipped.length) {
            this.reportSkipped();
        }
        if (this.errors.length) {
            this.reportErrors();
        }
        if (this.timerStopedAt) {
            var intervals_1 = '';
            if (this.timerIntervals.length) {
                var intervalStartingValue_1 = this.timerStartedAt;
                this.timerIntervals.forEach(function (interval) {
                    if (intervals_1.length) {
                        intervals_1 = "".concat(intervals_1, ", ");
                    }
                    var intervalName = interval.keys().next().value;
                    var intervalValue = interval.values().next().value;
                    intervals_1 = "".concat(intervals_1).concat(intervalName, " took ").concat(intervalValue - intervalStartingValue_1, " milliseconds");
                    intervalStartingValue_1 = intervalValue;
                });
                intervals_1 = " (".concat(intervals_1.trim(), ")");
            }
            this.log("Finished in ".concat(this.timerStopedAt - this.timerStartedAt, " milliseconds").concat(intervals_1));
        }
        else {
            this.log('Finished');
        }
        var numberOfExecutedTest = this.numberOfExecutedTest - this.skipped.length;
        if (numberOfExecutedTest) {
            var skippedString = '';
            if (this.skipped.length) {
                skippedString = " (".concat(this.skipped.length, " skipped)");
            }
            if (this.errors.length) {
                this.log(this.red("".concat(this.pluralize('test', numberOfExecutedTest)).concat(skippedString, ", ").concat(this.pluralize('failure', this.errors.length))));
                this.reportFailuresLocations();
            }
            else {
                this.log(this.green("".concat(this.pluralize('test', numberOfExecutedTest)).concat(skippedString, ", no failure \uD83D\uDC4F")));
            }
        }
        else {
            if (this.skipped.length) {
                this.log(this.yellow("No test has been executed (".concat(this.skipped.length, " skipped) \uD83E\uDD14")));
            }
            else {
                this.log(this.yellow('No test has been executed ðŸ¤”'));
            }
        }
    };
    SummaryReporter.prototype.reportSkipped = function () {
        var _this = this;
        this.error('Skipped:');
        this.skipped.forEach(function (skipped, index) {
            var prefix = "  ".concat(index + 1, ")");
            _this.error('');
            _this.error("".concat(prefix, " ").concat(_this.yellow(skipped.testName)));
            _this.error(_this.pad(_this.yellow("# ".concat(skipped.testLocation)), prefix.length + 1));
            _this.error('');
        });
    };
    SummaryReporter.prototype.reportErrors = function () {
        var _this = this;
        this.error('Failures:');
        this.errors.forEach(function (error, index) {
            var _a, _b, _c, _d;
            var prefix = "  ".concat(index + 1, ")");
            _this.error('');
            _this.error("".concat(prefix, " ").concat(error.testName));
            if ((_a = error.error) === null || _a === void 0 ? void 0 : _a.message) {
                var message = error.error.message;
                _this.error(_this.pad(_this.red(message), prefix.length + 1));
            }
            if (((_b = error.error) === null || _b === void 0 ? void 0 : _b.actual) && ((_c = error.error) === null || _c === void 0 ? void 0 : _c.expected)) {
                _this.error('');
                _this.error(_this.red(_this.pad("  expected: ".concat(error.error.expected), prefix.length + 1)));
                _this.error(_this.red(_this.pad("       got: ".concat(error.error.actual), prefix.length + 1)));
            }
            if ((_d = error.error) === null || _d === void 0 ? void 0 : _d.operator) {
                _this.error('');
                _this.error(_this.red(_this.pad("  (compared using ".concat(error.error.operator, ")"), prefix.length + 1)));
            }
            if (error.stack) {
                _this.error(_this.pad(_this.green("# ".concat(_this.findSpec(error.stack))), prefix.length + 1));
            }
            _this.error('');
        });
    };
    SummaryReporter.prototype.reportFailuresLocations = function () {
        this.error('');
        this.error('Spec with failures:');
        this.error('');
        for (var _i = 0, _a = this.errors; _i < _a.length; _i++) {
            var error = _a[_i];
            var location = error.testLocation || (error.stack && this.findSpec(error.stack)) || undefined;
            if (location === undefined) {
                return;
            }
            this.error(this.red(location));
        }
    };
    SummaryReporter.prototype.pad = function (message, length) {
        var pad = Array(length + 1).join(' ');
        return message.split('\n').map(function (m) { return "".concat(pad).concat(m); }).join('\n');
    };
    SummaryReporter.prototype.findSpec = function (stack) {
        var regexp = /^at[\s]*.*$/;
        try {
            var matches = stack
                .split('\n')
                .filter(function (m) { return regexp.test(m.trim()); })[0]
                .trim()
                .match(/^at\s*(.*)$/);
            if (matches && matches.length > 1) {
                return matches[1];
            }
        }
        catch (_a) {
            // We've not been able to properly find spec files in the stack trace
            // We just ignore the error
        }
        return '';
    };
    SummaryReporter.prototype.pluralize = function (word, number) {
        return "".concat(number, " ").concat(word).concat(number > 1 ? 's' : '');
    };
    return SummaryReporter;
}(base_console_reporter_js_1.default));
exports.default = SummaryReporter;
