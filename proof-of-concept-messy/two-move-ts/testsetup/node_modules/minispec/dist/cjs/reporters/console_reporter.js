"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var base_console_reporter_js_1 = require("./base_console_reporter.js");
var summary_reporter_js_1 = require("./summary_reporter.js");
var ConsoleReporter = /** @class */ (function (_super) {
    __extends(ConsoleReporter, _super);
    function ConsoleReporter(summaryReporter, outStream, errorStream) {
        var _this = _super.call(this, outStream, errorStream) || this;
        _this.summaryReporter = summaryReporter || new summary_reporter_js_1.default(_this.outStream, _this.errorStream);
        return _this;
    }
    ConsoleReporter.prototype.startContext = function (context) {
        if (this.activeContexts.length === 0) {
            this.log('');
        }
        _super.prototype.startContext.call(this, context);
        if (context.isSkipped()) {
            this.log(this.indent(this.yellow("".concat(context.name, " (SKIPPED)"))));
        }
        else {
            this.log(this.indent(context.name));
        }
        this.summaryReporter.startContext(context);
    };
    ConsoleReporter.prototype.stopContext = function () {
        _super.prototype.stopContext.call(this);
        this.summaryReporter.stopContext();
    };
    ConsoleReporter.prototype.startTest = function (test) {
        _super.prototype.startTest.call(this, test);
        this.summaryReporter.startTest(test);
    };
    ConsoleReporter.prototype.stopTest = function (error) {
        var activeTest = this.activeTest;
        _super.prototype.stopTest.call(this);
        var indentedTestName = this.indent((activeTest === null || activeTest === void 0 ? void 0 : activeTest.name) || '', true);
        if (error) {
            if (error.message === 'skipped') {
                this.error(this.yellow("".concat(indentedTestName, " (SKIPPED)")));
            }
            else {
                this.error(this.red("".concat(indentedTestName, " (FAILED)")));
            }
        }
        else {
            this.log(this.green(indentedTestName));
        }
        this.summaryReporter.stopTest(error);
    };
    ConsoleReporter.prototype.summarizeExecution = function () {
        this.summaryReporter.summarizeExecution();
    };
    ConsoleReporter.prototype.startTimer = function (timeInMilliseconds) {
        this.summaryReporter.startTimer(timeInMilliseconds);
    };
    ConsoleReporter.prototype.stopTimer = function (timeInMilliseconds) {
        this.summaryReporter.stopTimer(timeInMilliseconds);
    };
    ConsoleReporter.prototype.addTimerInterval = function (timeInMilliseconds, intervalName) {
        this.summaryReporter.addTimerInterval(timeInMilliseconds, intervalName);
    };
    ConsoleReporter.prototype.indent = function (message, isTest) {
        if (isTest === void 0) { isTest = false; }
        var level = this.activeContexts.length - 1;
        var extra = isTest ? 3 : 1;
        var indentation = Array(level * 2 + extra).join(' ');
        return "".concat(indentation).concat(message);
    };
    return ConsoleReporter;
}(base_console_reporter_js_1.default));
exports.default = ConsoleReporter;
