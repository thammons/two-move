"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BaseReporter = /** @class */ (function () {
    function BaseReporter() {
        this.activeContexts = [];
        this.activeTest = null;
        this.timerStartedAt = 0;
        this.timerStopedAt = 0;
        this.timerIntervals = [];
    }
    BaseReporter.prototype.startContext = function (context) {
        if (this.activeTest) {
            throw new Error('Test in progress, stop it before starting a new context');
        }
        this.activeContexts.push(context);
    };
    BaseReporter.prototype.stopContext = function () {
        if (this.activeTest) {
            throw new Error('Test in progress, stop it before stopping active context');
        }
        if (this.activeContexts.length) {
            this.activeContexts.pop();
            return;
        }
        throw new Error('No active context to stop');
    };
    BaseReporter.prototype.startTest = function (test) {
        if (this.activeTest) {
            throw new Error('Test in progress, stop it before starting a new one');
        }
        this.activeTest = test;
    };
    BaseReporter.prototype.stopTest = function () {
        if (!this.activeTest) {
            throw new Error('No active test to stop');
        }
        this.activeTest = null;
    };
    BaseReporter.prototype.summarizeExecution = function () {
        if (this.activeTest) {
            throw new Error('Test in progress, stop it before asking for execution summary');
        }
        if (this.activeContexts.length) {
            throw new Error('Context in progress, stop it before asking for execution summary');
        }
    };
    BaseReporter.prototype.startTimer = function (timeInMilliseconds) {
        this.timerStartedAt = BaseReporter.getActualTime(timeInMilliseconds);
    };
    BaseReporter.prototype.addTimerInterval = function (timeInMilliseconds, intervalName) {
        var interval = new Map();
        interval.set(intervalName || "interval #".concat(this.timerIntervals.length), BaseReporter.getActualTime(timeInMilliseconds));
        this.timerIntervals.push(interval);
    };
    BaseReporter.prototype.stopTimer = function (timeInMilliseconds) {
        this.timerStopedAt = BaseReporter.getActualTime(timeInMilliseconds);
    };
    BaseReporter.getActualTime = function (timeInMilliseconds) {
        if (timeInMilliseconds === undefined) {
            return Date.now();
        }
        return timeInMilliseconds;
    };
    Object.defineProperty(BaseReporter.prototype, "activeContext", {
        get: function () {
            if (this.activeContexts.length) {
                return this.activeContexts[this.activeContexts.length - 1];
            }
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    return BaseReporter;
}());
exports.default = BaseReporter;
